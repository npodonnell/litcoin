from typing import Final
from litcoin.secp256k1_ecdsa import secp256k1_ecdsa_sign, secp256k1_ecdsa_verify
from litcoin.binhex import b
import unittest

"""
Test cases were generated with the "official" secp256k1 library.
https://github.com/bitcoin-core/secp256k1.git
Commit hash: 485f608fa9e28f132f127df97136617645effe81
"""

MSG_HASH: Final[bytes] = b("315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3")
BAD_MSG_HASH: Final[bytes] = b("315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd4")

# Naturally low s.
PRIVKEY_1: Final[int] = 64232834872967360002211345063887994146790522123274456644695293051595838629937
PUBKEY_1: Final[tuple[int, int]] = (
    55173270408443316925721914421228381042291441320293228708403178145124811593079,
    33775624570639333905127850349900297568059235815506565202881330955837833255349
)
EXP_SIG_1: Final[tuple[int, int]] = (
    16586642487822701996776114739632993920426540354541552635482189416136627750540,
    30037983404342793357087882969720482313583432727169829015988924382022168147707
)

# Requires modification of s.
PRIVKEY_2: Final[int] = 88524536467685540430760265672189508848005094801200417787118316174097635321572
PUBKEY_2: Final[tuple[int, int]] = (
    98999396901065845765862186234145935192457761223260558525826818529791416521817,
    83233619044973447002324205570662115720035269279642592351417625969271490267154
)
EXP_SIG_2: Final[tuple[int, int]] = (
    33782461897810258991982521868756122554904563147218340649406403404447756104374,
    46590072132071111691142562242890070093476563752106099251076845399601207286719
)

# Uses an extra nonce of 0x01 (counter=1)
PRIVKEY_3: Final[int] = 66718066419721766926251297647798791136798950600985021111329923738097525656837
PUBKEY_3: Final[tuple[int, int]] = (
    24089455192692353716490829129922438512889878981234827159436368039614197821774,
    12783905740794343475621566135253291402132980919044313279064072858504280832959
)
EXP_SIG_3: Final[tuple[int, int]] = (
    53430531296560568876412180503211254793518978705158326341027765615376006549187,
    19391932408614768692834766332064850660511266644874663632797064679411262465358
)

# Uses an extra nonce of 0x02000100 (counter=65538)
PRIVKEY_4: Final[int] = 61076702390279199292486374583212233504901469691441991402306843082468971190259
PUBKEY_4: Final[tuple[int, int]] = (
    3488339428936857428372316363023350724393149268305602218755319928027757152817,
    54366624163822440405978856172982440628775920335965767665793104120486529815677
)
EXP_SIG_4: Final[tuple[int, int]] = (
    15707418134025261400018540251316931439142269063306966561902307469546313486200,
    17614993475642614796197783204990056319975121843508970407183516726188493385315
)

class TestSecp256k1Ecdsa(unittest.TestCase):
    def test_secp256k1_ecdsa_sign(self):
        self.assertEqual(secp256k1_ecdsa_sign(PRIVKEY_1, MSG_HASH), EXP_SIG_1)
        self.assertEqual(secp256k1_ecdsa_sign(PRIVKEY_2, MSG_HASH), EXP_SIG_2)
        self.assertEqual(secp256k1_ecdsa_sign(PRIVKEY_3, MSG_HASH, 1), EXP_SIG_3)
        self.assertEqual(secp256k1_ecdsa_sign(PRIVKEY_4, MSG_HASH, 65538), EXP_SIG_4)

    def test_secp256k1_ecdsa_verify(self):
        self.assertEqual(secp256k1_ecdsa_verify(EXP_SIG_1, PUBKEY_1, MSG_HASH), True)
        self.assertEqual(secp256k1_ecdsa_verify(EXP_SIG_2, PUBKEY_2, MSG_HASH), True)
        self.assertEqual(secp256k1_ecdsa_verify(EXP_SIG_3, PUBKEY_3, MSG_HASH), True)
        self.assertEqual(secp256k1_ecdsa_verify(EXP_SIG_4, PUBKEY_4, MSG_HASH), True)
        self.assertEqual(secp256k1_ecdsa_verify(EXP_SIG_2, PUBKEY_1, MSG_HASH), False)
        self.assertEqual(secp256k1_ecdsa_verify(EXP_SIG_2, PUBKEY_2, BAD_MSG_HASH), False)
